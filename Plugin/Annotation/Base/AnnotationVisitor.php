<?php declare(strict_types=1);

namespace Drenso\PhanExtensions\Visitor\Annotation\Base;

use Phan\PluginV2\PluginAwarePostAnalysisVisitor;
use ast\Node;

use const ast\flags\USE_NORMAL;

/**
 * When __invoke on this class is called with a node, a method
 * will be dispatched based on the `kind` of the given node.
 *
 * Visitors such as this are useful for defining lots of different
 * checks on a node based on its kind.
 *
 * @author BobV
 */
abstract class AnnotationVisitor extends PluginAwarePostAnalysisVisitor
{
  /**
   * Holds the class annotations that need to be checked for every class
   *
   * @var array
   */
  protected $classAnnotationsToCheck = [];

  /**
   * Holds the method annotations that need to be checked for every class
   *
   * @var array<string>
   */
  protected $methodAnnotationsToCheck = [];

  /**
   * Holds the property annotations that need to be checked for every class
   *
   * @var array<string>
   */
  protected $propertyAnnotationsToCheck = [];

  /**
   * Visit class
   *
   * @param Node $node
   *
   * @throws \AssertionError
   */
  public function visitClass(Node $node)
  {
    $this->checkDocBlock($node, $this->classAnnotationsToCheck);
  }

  /**
   * Visit method
   *
   * @param Node $node
   *
   * @throws \AssertionError
   */
  public function visitMethod(Node $node)
  {
    $this->checkDocBlock($node, $this->methodAnnotationsToCheck);
  }

  /**
   * Visit property
   *
   * @param Node $node
   *
   * @throws \AssertionError
   */
  public function visitPropElem(Node $node)
  {
    $this->checkDocBlock($node, $this->propertyAnnotationsToCheck);
  }

  /**
   * Retrieves the docblock for the node, and checks for the given annotations
   *
   * @param Node $node
   * @param array $annotationsToCheck
   *
   * @throws \AssertionError
   */
  private function checkDocBlock(Node $node, array $annotationsToCheck){
    // Retrieve the doc block
    $docblock = $node->children['docComment'];

    // Ignore empty doc blocks
    if ($docblock === NULL || strlen($docblock) == 0) {
      return;
    }

    // Loop the known annotations in order to check them
    foreach ($annotationsToCheck as $annotation) {
      $this->checkAnnotation($docblock, $annotation);
    }
  }

  /**
   * Checks whether the given annotation is used in the docblock comment, and then resolves
   * it in the namespace map.
   *
   * @param string $docblock
   * @param string $annotation
   *
   * @throws \AssertionError
   */
  private function checkAnnotation(string $docblock, string $annotation)
  {

    // If the docblock does not contain the annotation, simply skip it
    if (false === strpos($docblock, '@' . $annotation)) {
      return;
    }

    try {
      // Check for map to avoid exceptions
      if ($this->context->hasNamespaceMapFor(USE_NORMAL, $annotation)) {
        // Add usuage of this annotation to the namespace map
        // See https://github.com/phan/phan/pull/1467
        $this->context->getNamespaceMapFor(USE_NORMAL, $annotation);
      } else {
        // The annotation is used, but not imported correctly (probably)
        $this->emit(
            'AnnotationNotImported',
            'The annotation {CLASS} was never imported (generated by DrensoAnnotation plugin)',
            [$annotation]
        );
      }
    } catch (\Exception $e) {
      // Do nothing, simply ignore
    }
  }
}
