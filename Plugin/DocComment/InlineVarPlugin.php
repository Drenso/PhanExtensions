<?php

namespace Drenso\PhanExtensions\Plugin\DocComment;

require_once __DIR__ . '/../../Helper/NamespaceChecker.php';

use Drenso\PhanExtensions\Helper\NamespaceChecker;
use Phan\CodeBase;
use Phan\Language\Element\Clazz;
use Phan\PluginV2;
use Phan\PluginV2\AnalyzeClassCapability;

class InlineVarPlugin extends PluginV2 implements AnalyzeClassCapability
{
  public function analyzeClass(CodeBase $code_base, Clazz $class)
  {
    // Check the file ref
    $file = $class->getFileRef();
    if ($file->isPHPInternal()) return;

    // Only check files in the src directory
    if (strpos($file, 'src/') === 0) {

      if (function_exists('token_get_all')) {
        $tokens = token_get_all(file_get_contents($file->getFile()));
        foreach ($tokens as $token) {
          // Filter comment tokens
          if ($token[0] != T_COMMENT && $token[0] !== T_DOC_COMMENT) continue;

          // Set line number to found one
          $lineNumber = $class->getContext()->getLineNumberStart();
          $class->getContext()->withLineNumberStart($token[2]);

          // Retrieve errors
          $this->findUsages($code_base, $class, $token[1]);

          // Restore line number to prevent errors
          $class->getContext()->withLineNumberStart($lineNumber);
        }
      } else {
        // Forward complete file content
        $this->findUsages($code_base, $class, file_get_contents($file->getFile()));
      }
    }
  }

  /**
   * @param CodeBase $code_base
   * @param Clazz $class
   * @param string $content
   */
  private function findUsages(CodeBase $code_base, Clazz $class, string $content): void
  {
    preg_match_all('/\/\*\*? \@var (\w*)\|?(\[\]|\w*)? ([\$\w]+) \*?\*\//', $content, $matches);
    $results = array_merge($matches[1], $matches[2]);
    foreach ($results as $match) {
      NamespaceChecker::checkPlugin($this, $code_base, $class->getContext(), $match, "VarStatementNotImported",
          "The classlike/namespace {CLASS} in the \"var\" statement was never imported (generated by InlineVar plugin)");
    }
  }
}

// Every plugin needs to return an instance of itself at the
// end of the file in which its defined.
return new InlineVarPlugin();
