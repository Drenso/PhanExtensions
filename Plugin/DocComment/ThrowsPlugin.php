<?php

namespace Drenso\PhanExtensions\Plugin\DocComment;

require_once __DIR__ . '/../../Helper/NamespaceChecker.php';

use Drenso\PhanExtensions\Helper\NamespaceChecker;
use Phan\PluginV3;
use Phan\PluginV3\PluginAwarePostAnalysisVisitor;
use Phan\PluginV3\PostAnalyzeNodeCapability;
use ast\Node;

/**
 * Class ThrowsPlugin
 *
 * @suppress PhanDeprecatedInterface
 */
class ThrowsPlugin extends PluginV3 implements PostAnalyzeNodeCapability
{
  public static function getPostAnalyzeNodeVisitorClassName(): string
  {
    return ThrowsVisitor::class;
  }
}

/**
 * Class ThrowsVisitor
 *
 * @suppress PhanUnreferencedClass, PhanDeprecatedInterface
 */
class ThrowsVisitor extends PluginAwarePostAnalysisVisitor
{

  /**
   * Visit method
   *
   * @param Node $node
   *
   * @throws \AssertionError
   */
  public function visitMethod(Node $node)
  {
    // Retrieve the doc block
    $docComment = $node->children['docComment'];

    // Ignore empty doc blocks
    if ($docComment === NULL || strlen($docComment) == 0) {
      return;
    }

    // Retrieve all throws annotations from the doc comment
    preg_match_all('/\s*\*\s*\@throws\s([A-Z]\w*)/', $docComment, $matches);
    foreach ($matches[1] as $annotation) {
      NamespaceChecker::checkVisitor($this, $this->code_base, $this->context, $annotation, 'ThrowsStatementNotImported',
          'The classlike/namespace {CLASS} in the "throws" statement was never imported (generated by Throws plugin)');
    }
  }

}

// Every plugin needs to return an instance of itself at the
// end of the file in which its defined.
return new ThrowsPlugin(); // @phan-suppress-current-line PhanDeprecatedInterface
