<?php

namespace Drenso\PhanExtensions\Plugin\DocComment;

use Phan\PluginV2;
use Phan\PluginV2\PluginAwarePostAnalysisVisitor;
use Phan\PluginV2\PostAnalyzeNodeCapability;
use ast\Node;

use const ast\flags\USE_NORMAL;

class ThrowsPlugin extends PluginV2 implements PostAnalyzeNodeCapability
{

  /**
   * Returns the name of the visitor class to be instantiated and invoked to analyze a node in the analysis phase.
   * (To analyze a node. PostAnalyzeNodeCapability is run after PreAnalyzeNodeCapability)
   * The class should be created by the plugin visitor, and must extend PluginAwarePostAnalysisVisitor.
   *
   * If state needs to be shared with a visitor and a plugin, a plugin author may use static variables of that plugin.
   *
   * @return string - The name of a class extending PluginAwarePostAnalysisVisitor
   */
  public static function getPostAnalyzeNodeVisitorClassName(): string
  {
    return ThrowsVisitor::class;
  }
}

/**
 * When __invoke on this class is called with a node, a method
 * will be dispatched based on the `kind` of the given node.
 *
 * Visitors such as this are useful for defining lots of different
 * checks on a node based on its kind.
 *
 * @author BobV
 */
class ThrowsVisitor extends PluginAwarePostAnalysisVisitor
{

  /**
   * Visit method
   *
   * @param Node $node
   *
   * @throws \AssertionError
   */
  public function visitMethod(Node $node)
  {
    // Retrieve the doc block
    $docComment = $node->children['docComment'];

    // Ignore empty doc blocks
    if ($docComment === NULL || strlen($docComment) == 0) {
      return;
    }

    // Retrieve all throw annotations from the doc comment
    preg_match_all('/\s*\*\s*\@throws\s(\w+)/', $docComment, $matches);
    foreach ($matches[1] as $annotation){
      try {
        // Check for map to avoid exceptions
        if ($this->context->hasNamespaceMapFor(USE_NORMAL, $annotation)) {
          // Add usage of this annotation to the namespace map
          // See https://github.com/phan/phan/pull/1467
          $this->context->getNamespaceMapFor(USE_NORMAL, $annotation);
        } else {
          // The annotation is used, but not imported correctly (probably)
          $this->emit(
              'ThrowsDeclarationNotImported',
              'The declaration {CLASS} in the "throws" statement was never imported (generated by DrensoAnnotation plugin)',
              [$annotation]
          );
        }
      } catch (\Exception $e) {
        // Do nothing, simply ignore
      }
    }
  }

}

// Every plugin needs to return an instance of itself at the
// end of the file in which its defined.
return new ThrowsPlugin();
